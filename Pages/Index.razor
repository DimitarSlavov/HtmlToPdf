@page "/"

@inject IJSRuntime JSRuntime

<PageTitle>HtmlToPdf</PageTitle>

<h1 class="h1 text-center">HTML To PDF Converter</h1>

<div class="container-fluid">
	<div class="col-10 offset-1">
		<button type="submit" class="btn btn-success mb-3" onclick="@(() => ConvertHtmlToPdf())">Convert</button>
		<button type="submit" class="btn btn-warning mb-3 float-end" onclick="@(() => Reset())">Reset</button>
	</div>
	<div class="row">
		<div class="col-5 offset-1">
			<div class="mb-5">
				<label for="content" class="form-label text-uppercase fw-bold">Html</label>
				<textarea id="content" class="form-control" value="@html" @onchange=@(x => HandleHtmlValue(x))></textarea>
			</div>
		</div>
		<div class="col-5">
			<div class="mb-5">
				<label class="form-label text-uppercase fw-bold">Pdf</label>
				<embed id="pdf" class="form-control" src="@pdf" type="application/pdf">
			</div>
		</div>
	</div>
</div>

@code {
	private const string Src = "data:application/pdf;base64,";

	private string? pdf;
	private string? html;

	private async Task HandleHtmlValue(ChangeEventArgs x)
	{
		html = x.Value?.ToString();

		await Task.Delay(TimeSpan.FromSeconds(1));

		if (!string.IsNullOrWhiteSpace(html))
			await ConvertHtmlToPdf();	
	}

	private async Task ConvertHtmlToPdf(CancellationToken ct = default)
	{
		if (!string.IsNullOrWhiteSpace(html))
		{
			var result = await JSRuntime.InvokeAsync<byte[]>("convertHtmlToPdf", ct);

			ct.ThrowIfCancellationRequested();

			pdf = Src + Convert.ToBase64String(result);
		}
	}

	private async Task Reset()
	{
		var cts = new CancellationTokenSource();

		cts.Cancel();

		try
		{
			await ConvertHtmlToPdf(cts.Token);
		}
		catch (OperationCanceledException)
		{
			//log error
		}
		finally
		{
			html = null;
			pdf = null;
		}
	}
}
